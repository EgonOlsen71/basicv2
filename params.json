{
  "name": "BasicV2",
  "tagline": "A BASIC interpreter/compiler that's compatible with the BASIC V2 dialect used on older Commodore computers",
  "body": "### What it is\r\nBasicV2 is an attempt to write a BASIC interpreter/compiler in Java that is compatible with the BASIC dialect that older Commodore home computers ([Commodore on WikiPedia](https://en.wikipedia.org/wiki/Commodore_International)) were using. It can run BASIC programs written in BASIC V2 or ANSI BASIC.   \r\nIt doesn't use any parts of the implementation of the original Commodore BASIC like similar projects do. It's a complete reimplementation in Java.\r\n\r\n### What it isn't\r\nIt's not an emulator! It doesn't provide any of the graphics or sound capabilities of a C64 or a VIC20. It just runs the programs and outputs the results onto the console.\r\n\r\n### How is works\r\nIt compiles the BASIC code into a kind of instance tree structure that it then \"executes\" to run the BASIC program. It outputs the results onto the console. \r\n\r\n### Compatibility\r\nAll Basic V2 commands are implemented and all should behave in the way in which they would on a real machine. But because the actual hardware isn't emulated, no PEEKs or POKES will do anything useful and no SYS calls will execute anything.   \r\nHowever, the implementation supports 64KB of memory from which programs can read and in which they can write by using PEEKs and POKEs.   \r\nFile I/O is supported to a certain degree, i.e. you can read and write files to virtual, in-memory discs and tapes, but disc commands and such aren't supported.\r\n\r\n### Limitations\r\nAs mentioned, it doesn't really support any of the hardware features of Commodore's machines, so any program that manipulates memory addresses or uses control characters or PETSCII characters will not run as intended. It will most likely run without crashing but the visual or oral output that the program intends to generate simply won't be there.\r\nError messages differ from the ones of the original interpreter. Some are better and more detailed while others might be not as good.\r\n\r\n### Enhancements\r\nCompared to the original BASIC V2 interpreter, this one features some enhancements:\r\n\r\n1. No memory limitation of 38911 bytes. BASIC programs can be as large as the JVM's memory settings allow them to be.\r\n2. Virtually no line number limitations. Line numbers can exceed 63999 without a problem.\r\n3. Lower and upper case and both be used an even mixed in a BASIC program.\r\n4. Integer numbers aren't limited to 16bit anymore, but to 32bit. Real numbers are mapped to Java's floats, which provides higher a accuracy and range.\r\n5. It's much faster.\r\n\r\n### Speed\r\nIt's not as fast as plain Java, of course. But it's actually pretty fast. On a 4Ghz Core i7, it's approx. 19,000 times faster than a C64 when it comes to number crunching.   \r\nCompared to PHP and tested with a simple prime number calculation ( you can find an example in /src/test/resources/prime2.bas) it was 6 times faster than PHP 5.6 and 3.5 times faster than PHP 7 on the same machine.\r\n\r\n### How to use\r\nYou can find basic usage examples in the test directory. Running a BASIC program is quite simple:\r\n\r\n    String[] code= Loader.loadProgram(\"src/test/resources/basic/example.bas\");\r\n    Interpreter inty = new Interpreter(code);\r\n    inty.run();`\r\n\r\nThere are some more options, but that's basically it.   \r\nIn addition, you can use it as a templating engine. You can find an example for this in the TemplateTest.java file.\r\n\r\n### Why? Just...why?\r\nBecause I could.\r\n\r\n### Support or Contact\r\nHaving trouble? Send me an [email](mailto:basic@jpct.net).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}